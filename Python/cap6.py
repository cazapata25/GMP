# -*- coding: utf-8 -*-
"""cap6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZczV5ja39dgy1Y_GebuSPKzRxu0tf2Ig

# Gestión Moderna de Portafolio
### Autores Bernardo León y Carlos Zapata
### (C) Copyright 2023

## Capitulo 6: Medida Omega $\Omega$
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install --quiet yfinance

#Librerías usadas
import pandas as pd
import numpy as np
import cvxpy as cp
import matplotlib.pyplot as plt
import yfinance as yf
import warnings
warnings.filterwarnings("ignore")

"""### Ejemplo 6.1"""

# Información histórica para las acciones: AAPL, AMZN, GOOG y MSFT
fechai = "2009-12-01"
fechaf = "2021-12-31"
periodicidad = "1Mo"
activos = ["AAPL","AMZN","GOOGL","MSFT"]
precios = yf.download(activos,start=fechai,end=fechaf,interval=periodicidad)['Adj Close'].dropna()
retornos = np.log(precios/precios.shift(1)).dropna()
mu = retornos.mean()*12
cov = retornos.cov()*12
var = np.diag(cov)
sigma = np.sqrt(var)
n = len(mu)

# Calculo excesos y umbral h
h = 0
excesos = retornos-h
pos_ret = excesos[excesos>h].sum()
neg_ret = excesos[excesos<h].sum()
omegai = pos_ret / (-neg_ret )
omegai

"""# Optimización usando SCIPY"""

from scipy.optimize import minimize

def omega(pesos, retornos, h):
  port_return = retornos @ pesos
  excesos = port_return-h
  pos_ret = excesos[excesos>h].sum()
  neg_ret = excesos[excesos<h].sum()
  return pos_ret / (-neg_ret )

#
def optimize_omega(retornos, h):
  pesos = np.repeat(1/n,n)
  objective = lambda pesos: -omega(pesos, retornos, h)
  bounds = [(0, 1)] * n
  solution = minimize(objective, pesos, bounds=bounds)
  return solution.x/sum(solution.x)

h= 0
wpo = optimize_omega(retornos, h)
wpo