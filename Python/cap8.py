# -*- coding: utf-8 -*-
"""cap8.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dmQvyUm-sgzy57LG7PG_wKBDL4uoKuOS

# Gestión Moderna de portafolio
### Autores Bernardo León y Carlos Zapata
### Copyright 2022

## Capitulo 8: Modelos Factoriales
"""

# Commented out IPython magic to ensure Python compatibility.
#Librerías usadas
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# %pip install yfinance
import yfinance as yf

"""### Ejemplo 8.1

### Estimación modelo CAPM
"""

# Información histórica para la acción de WMT
fechai = "2015-12-01"
fechaf = "2020-12-31"
periodicidad = "1Mo"
precios_wmt = yf.download("WMT",start=fechai,end=fechaf,interval=periodicidad)['Adj Close'].dropna()
retornos_wmt = np.log(precios_wmt/precios_wmt.shift(1)).dropna()

# Información histórica del índice SP 500
fechai = "2015-12-01"
fechaf = "2020-12-31"
periodicidad = "1Mo"
precios_sp = yf.download("^GSPC",start=fechai,end=fechaf,interval=periodicidad)['Adj Close'].dropna()
retornos_sp = np.log(precios_sp/precios_sp.shift(1)).dropna()
rm = retornos_sp.mean()

## Estimación modelo de mercado: CAPM
import statsmodels.api as sm
X = sm.add_constant(retornos_sp) #
modelo1 = sm.OLS(retornos_wmt, X).fit()

beta_wmt = modelo1.params[1]
beta_wmt

print("Beta: ", beta_wmt)
print("R2: ", modelo1.rsquared)

modelo1.summary()

predictions = modelo1.predict(X)

# Grafico de regresión: WMT - S&P 500
plt.figure(figsize=(8, 4))
plt.plot(retornos_sp, predictions)  # regression line
plt.plot(retornos_sp, retornos_wmt, 'bo') 
plt.xlabel('Retornos S&P 500')
plt.ylabel('Retornos WMT')
plt.show()

"""### Estimación modelo Factorial"""

tasa_txn = yf.download('TXN',start=fechai,end=fechaf,interval=periodicidad)['Adj Close'].dropna()
retornos_txn = np.log(tasa_txn/tasa_txn.shift(1)).dropna()
mu_txn = retornos_txn.mean()

# Regresión factorial con S&P 500 y TXN
Xf = np.column_stack((retornos_sp,retornos_txn))
Xf = sm.add_constant(Xf) 
modelo2 = sm.OLS(retornos_wmt, Xf).fit()
modelo2.params

beta_wmt = modelo2.params[1]
beta_txn = modelo2.params[2]

print("Beta: ", beta_wmt)
print("Beta TXN: ", beta_txn)
print("R2: ", modelo2.rsquared)

print(modelo2.summary())

# Retornos estimados 
# CAPM
re_capm = round(beta_wmt*rm,4)

# Factorial
re_fact = round(beta_wmt*rm+beta_txn*mu_txn,4)

print("E(R) capm: ", re_capm)
print("E(R) fact: ", re_fact)

# Grafico de regresión: WMT - TXN
plt.figure(figsize=(8, 4))
#plt.plot(retornos_sp, predictions)  # regression line
plt.plot(retornos_txn, retornos_wmt, 'bo') 
plt.xlabel('Retornos TXN')
plt.ylabel('Retornos WMT')
plt.show()

"""### Ejemplo 8.2: Estimación factorial"""

# Información histórica para las acciones: AAPL, AMZN, GOOG y MSFT
fechai = "2015-12-01"
fechaf = "2020-12-31"
periodicidad = "1Mo"
activos = ["AAPL","AMZN","GOOGL","MSFT"]
precios = yf.download(activos,start=fechai,end=fechaf,interval=periodicidad)['Adj Close'].dropna()
retornos = np.log(precios/precios.shift(1)).dropna()

# Load data INDIPRO y UNEMP
#data = pd.read_csv("factores.csv").values
factores = pd.read_csv("factores.csv")[['indipro','unemp']]
factores.index = retornos_sp.index
factores2 = factores.join(retornos_sp)

# Regresión factorial para AAPL
modeloAAPL = sm.OLS(retornos['AAPL'], sm.add_constant(factores2)).fit()
modeloAAPL.params

# Regresión factorial para AMZN
modeloAMZN = sm.OLS(retornos['AMZN'], sm.add_constant(factores2)).fit()
modeloAMZN.params

# Regresión factorial para GOOG
modeloGOOG = sm.OLS(retornos['GOOGL'], sm.add_constant(factores2)).fit()
modeloGOOG.params

# Regresión factorial para MSFT
modeloMSFT = sm.OLS(retornos['MSFT'], sm.add_constant(factores2)).fit()
modeloMSFT.params