# -*- coding: utf-8 -*-
"""Cap4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HYyHyiKF4fTVaJh97_M0i7bZXbwvQs98

# Gestión Moderna de portafolio
### Autores Bernardo León y Carlos Zapata
### Copyright 2022

## Capitulo 4: Utilidad esperada y aversión al riesgo

### Ejemplo 4.2
"""

# Commented out IPython magic to ensure Python compatibility.
#Librerías usadas
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# %pip install yfinance
import yfinance as yf

# Información histórica para las acciones: AAPL, AMZN, GOOG y MSFT
fechai = "2009-12-01"
fechaf = "2021-12-31"
periodicidad = "1Mo"
activos = ["AAPL","AMZN","GOOGL","MSFT"]
precios = yf.download(activos,start=fechai,end=fechaf,interval=periodicidad)['Adj Close'].dropna()
retornos = np.log(precios/precios.shift(1)).dropna()
mu = retornos.mean()*12
cov = retornos.cov()*12
var = np.diag(cov)
sigma = np.sqrt(var)
n = len(mu)
round(mu,4)

round(cov,4)

# Portafolio Tangente
rf = 0.0
r = mu -rf 
Z = np.linalg.solve(cov,r) 
sumaZ = Z.sum()
wpt = Z/sumaZ
rpt = wpt @ mu
sigmapt = np.sqrt(wpt.T @ cov @ wpt)

print('Resultados PT: ')
print('E(Rp): ', round(rpt,4))
print('SigmaP: ', round(sigmapt,4))

## Coeficiente de aversión al riesgo:
delta = (rpt-rf)/sigmapt

w = (np.linalg.inv(delta*cov) @ mu ) / (np.linalg.inv(delta*cov) @ mu).sum()
w